/***************************************************************************
**                                                                        **
**  ScriptCommunicator, is a tool for sending/receiving data with several **
**  interfaces.                                                           **
**  Copyright (C) 2014 Stefan Zieker                                      **
**                                                                        **
**  This program is free software: you can redistribute it and/or modify  **
**  it under the terms of the GNU General Public License as published by  **
**  the Free Software Foundation, either version 3 of the License, or     **
**  (at your option) any later version.                                   **
**                                                                        **
**  This program is distributed in the hope that it will be useful,       **
**  but WITHOUT ANY WARRANTY; without even the implied warranty of        **
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         **
**  GNU General Public License for more details.                          **
**                                                                        **
**  You should have received a copy of the GNU General Public License     **
**  along with this program.  If not, see http://www.gnu.org/licenses/.   **
**                                                                        **
****************************************************************************
**           Author: Stefan Zieker                                        **
**  Website/Contact: http://sourceforge.net/projects/scriptcommunicator/  **
****************************************************************************/

#include <climits>
#include "crc.h"


CRC::CRC()
{
}




/**
 * Calculates a crc8 with a generic polynomial.
 * @param date
 *		The data.
 * @param polynomial
 *		The polynomial to be used to calculate the CRC.
 * @param startValue
 *      The CRC start value.
 * @return
 *		The calculated crc.
 */
quint8 CRC::calculateCrc8(const QVector<unsigned char> data,
                          const unsigned char polynomial, const unsigned char startValue)
{
    quint8 crc = startValue;
	
	for( auto val: data )
	{
		crc = crc ^ val;
		
        for( qint32 i = 0; i < CHAR_BIT; ++i )
		{
			if( (crc & 0x80) != 0 )
			{
                crc = ((crc << 1)) ^ polynomial;
			}
			else
			{
				crc = (crc << 1);
			}
		}
	}
	
	return crc;	
} 
 
 
 

/**
 * Calculates a crc8.
 * @param data
 *      The data.
 * @return
 *      The calculated crc.
 */
quint8 CRC::calculateCrc8(const QVector<unsigned char> data)
{
    static const quint8 crc8Table[] = {
        0x00, 0x3e, 0x7c, 0x42, 0xf8, 0xc6, 0x84, 0xba, 0x95, 0xab, 0xe9, 0xd7,
        0x6d, 0x53, 0x11, 0x2f, 0x4f, 0x71, 0x33, 0x0d, 0xb7, 0x89, 0xcb, 0xf5,
        0xda, 0xe4, 0xa6, 0x98, 0x22, 0x1c, 0x5e, 0x60, 0x9e, 0xa0, 0xe2, 0xdc,
        0x66, 0x58, 0x1a, 0x24, 0x0b, 0x35, 0x77, 0x49, 0xf3, 0xcd, 0x8f, 0xb1,
        0xd1, 0xef, 0xad, 0x93, 0x29, 0x17, 0x55, 0x6b, 0x44, 0x7a, 0x38, 0x06,
        0xbc, 0x82, 0xc0, 0xfe, 0x59, 0x67, 0x25, 0x1b, 0xa1, 0x9f, 0xdd, 0xe3,
        0xcc, 0xf2, 0xb0, 0x8e, 0x34, 0x0a, 0x48, 0x76, 0x16, 0x28, 0x6a, 0x54,
        0xee, 0xd0, 0x92, 0xac, 0x83, 0xbd, 0xff, 0xc1, 0x7b, 0x45, 0x07, 0x39,
        0xc7, 0xf9, 0xbb, 0x85, 0x3f, 0x01, 0x43, 0x7d, 0x52, 0x6c, 0x2e, 0x10,
        0xaa, 0x94, 0xd6, 0xe8, 0x88, 0xb6, 0xf4, 0xca, 0x70, 0x4e, 0x0c, 0x32,
        0x1d, 0x23, 0x61, 0x5f, 0xe5, 0xdb, 0x99, 0xa7, 0xb2, 0x8c, 0xce, 0xf0,
        0x4a, 0x74, 0x36, 0x08, 0x27, 0x19, 0x5b, 0x65, 0xdf, 0xe1, 0xa3, 0x9d,
        0xfd, 0xc3, 0x81, 0xbf, 0x05, 0x3b, 0x79, 0x47, 0x68, 0x56, 0x14, 0x2a,
        0x90, 0xae, 0xec, 0xd2, 0x2c, 0x12, 0x50, 0x6e, 0xd4, 0xea, 0xa8, 0x96,
        0xb9, 0x87, 0xc5, 0xfb, 0x41, 0x7f, 0x3d, 0x03, 0x63, 0x5d, 0x1f, 0x21,
        0x9b, 0xa5, 0xe7, 0xd9, 0xf6, 0xc8, 0x8a, 0xb4, 0x0e, 0x30, 0x72, 0x4c,
        0xeb, 0xd5, 0x97, 0xa9, 0x13, 0x2d, 0x6f, 0x51, 0x7e, 0x40, 0x02, 0x3c,
        0x86, 0xb8, 0xfa, 0xc4, 0xa4, 0x9a, 0xd8, 0xe6, 0x5c, 0x62, 0x20, 0x1e,
        0x31, 0x0f, 0x4d, 0x73, 0xc9, 0xf7, 0xb5, 0x8b, 0x75, 0x4b, 0x09, 0x37,
        0x8d, 0xb3, 0xf1, 0xcf, 0xe0, 0xde, 0x9c, 0xa2, 0x18, 0x26, 0x64, 0x5a,
        0x3a, 0x04, 0x46, 0x78, 0xc2, 0xfc, 0xbe, 0x80, 0xaf, 0x91, 0xd3, 0xed,
        0x57, 0x69, 0x2b, 0x15};

    quint8 crc  = 0xff;
    for (auto val : data)
    {
        crc = crc8Table[(crc ^ val) & 0xff];
    }
    crc = ~crc;
    return crc;
}


/**
 * Calculates a crc16.
 * @param data
 *      The data.
 * @return
 *      The calculated crc.
 */
quint16 CRC::calculateCrc16(const QVector<unsigned char> data)
{
    static const quint16 crc16Table[256] =
    {
     0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
     0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
     0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
     0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
     0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
     0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
     0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
     0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
     0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
     0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
     0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
     0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
     0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
     0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
     0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
     0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
     0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
     0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
     0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
     0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
     0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
     0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
     0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
     0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
     0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
     0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
     0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
     0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
     0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
     0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
     0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
     0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040 };

    quint16 crc = 0xFFFF;
    for (auto val : data)
    {
        crc = (crc >> 8) ^ crc16Table[(crc ^ val) & 0xff];
    }
    crc = ~crc;
    return crc;

}


/**
 * Calculates a crc32.
 * @param data
 *      The data.
 * @return
 *      The calculated crc.
 */
quint32 CRC::calculateCrc32(const QVector<unsigned char> data)
{
    static bool crc32TableCreated = false;
    static quint32 crc32Table[256];

    if(!crc32TableCreated)
    {
        const quint32 CRCPOLY = 0xEDB88320;
        quint32 value;
        for (quint32 i = 0; i < 256; i++)
        {
            value = i;
            for (int j = 8; j > 0; j--)
            {
                if (value & 1)
                {
                    value = (value >> 1) ^ CRCPOLY;
                }
                else
                {
                    value >>= 1;
                }
            }
            crc32Table[i] = value;
        }

        crc32TableCreated = true;
    }

    quint32 crc = 0xFFFFFFFF;
    for (auto val : data)
    {
        crc = crc32Table[(crc ^ val) & 0xFF] ^ (crc >> 8);
    }
    crc = ~crc;
    return crc;

}

/**
 * Calculates a crc64.
 * @param data
 *      The data.
 * @return
 *      The calculated crc.
 */
quint64 CRC::calculateCrc64(const QVector<unsigned char> data)
{
    static bool crc64TableCreated = false;
    static quint64 crc64Table[256];

    if(!crc64TableCreated)
    {
        const quint64 CRCPOLY = 0x42F0E1EBA9EA3693;

        quint64 value;
        for (quint32 i = 0; i < 256; i++)
        {
            value = i;
            for (int j = 8; j > 0; j--)
            {
                if (value & 1)
                {
                    value = (value >> 1) ^ CRCPOLY;
                }
                else
                {
                    value >>= 1;
                }
            }
            crc64Table[i] = value;
        }

        crc64TableCreated = true;
    }

    quint64 crc = 0;
    for (auto val : data)
    {
        crc = crc64Table[(crc ^ val) & 0xFF] ^ (crc >> 8);
    }
    crc = ~crc;
    return crc;

}

quint16 CRC::calculateCrc(const QVector<unsigned char> data)
{

}
