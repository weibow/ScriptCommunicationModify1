scriptSql::addDatabase(String type, String connectionName = QLatin1String(QSqlDatabase::defaultConnection)):ScriptSqlDatabase \nAdds a database to the list of database connections using the driver type and the connection name\nconnectionName. If there already exists a database connection called connectionName, that connection is removed.\nThe database connection is referred to by connectionName. The newly added database connection is\nreturned.If type is not available or could not be loaded, isValid() returns false.\nIf connectionName is not specified, the new connection becomes the default connection for the\napplication, and subsequent calls to database() without the connection name argument will return the\ndefault connection. If a connectionName is provided here, use database(connectionName) to retrieve the connection.\nWarning: If you add a connection with the same name as an existing connection, the new connection\nreplaces the old one. If you call this function more than once without specifying connectionName, the\ndefault connection will be the one replaced.
scriptSql::cloneDatabase(ScriptSqlDatabase other, String connectionName):ScriptSqlDatabase \nClones the database connection other and stores it as connectionName. All the settings from the\noriginal database, e.g. databaseName(), hostName(), etc., are copied across. Does nothing if other\nis an invalid database. Returns the newly created database connection.\nNote: The new connection has not been opened. Before using the new connection, you must call open().
scriptSql::database(String connectionName = QLatin1String(QSqlDatabase::defaultConnection), bool open = true):ScriptSqlDatabase \nAddsReturns the database connection called connectionName. The database connection must have been\npreviously added with addDatabase(). If open is true (the default) and the database connection is not\nalready open it is opened now. If no connectionName is specified the default connection is used.\nIf connectionName does not exist in the list of databases, an invalid connection is returned.
scriptSql::removeDatabase(String connectionName):void \nRemoves the database connection connectionName from the list of database connections.\nWarning: There should be no open queries on the database connection when this function is called,\notherwise a resource leak will occur.
scriptSql::contains(String connectionName = QLatin1String(QSqlDatabase::defaultConnection)):bool \nReturns true if the list of database connections contains connectionName; otherwise returns false.
scriptSql::connectionNames():Array<String> \nReturns a list containing the names of all connections.
scriptSql::drivers():Array<String> \nReturns a list of all the available database drivers.
scriptSql::isDriverAvailable(String name):bool \nReturns true if a driver called name is available; otherwise returns false.
scriptSql::createQuery(ScriptSqlDatabase dataBase, String query = String()):ScriptSqlQuery \nCreates a ScriptSqlQuery object using the SQL query and the current database.
scriptSql::createField(String fieldName = String(), Number type = (Number)QVariant::Invalid):ScriptSqlField \nCreates a ScriptSqlField object.
scriptSql::createRecord(void):ScriptSqlRecord \nCreates a ScriptSqlRecord object.