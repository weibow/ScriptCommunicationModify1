ScriptSqlRecord::value(Number i):QVariant \nReturns the value of the field located at position index in the record. If index is out of bounds, an invalid QVariant is returned.
ScriptSqlRecord::value(String name):QVariant \nReturns the value of the field called name in the record. If field name does not exist an invalid variant is returned.
ScriptSqlRecord::setValue(Number i, QVariant val):void \nSets the value of the field at position index to val. If the field does not exist, nothing happens.
ScriptSqlRecord::setValue(String name, QVariant val):void \nSets the value of the field called name to val. If the field does not exist, nothing happens.
ScriptSqlRecord::setNull(Number i):void \nSets the value of field index to null. If the field does not exist, nothing happens.
ScriptSqlRecord::setNull(String name):void \nSets the value of the field called name to null. If the field does not exist, nothing happens.
ScriptSqlRecord::isNull(Number i):bool \nReturns true if the field index is null or if there is no field at position index; otherwise returns false.
ScriptSqlRecord::isNull(String name):bool \nReturns true if the field called name is null or if there is no field called name; otherwise returns false.
ScriptSqlRecord::indexOf(String name):Number \nReturns the position of the field called name within the record, or -1 if it cannot be found. Field names are not case-sensitive.\nIf more than one field matches, the first one is returned.
ScriptSqlRecord::fieldName(Number i):String \nReturns the name of the field at position index. If the field does not exist, an empty string is returned.
ScriptSqlRecord::field(Number i):ScriptSqlField \nReturns the field at position index. If the index is out of range, function returns a default-constructed value.
ScriptSqlRecord::field(String name):ScriptSqlField \nReturns the field called name.
ScriptSqlRecord::isGenerated(Number i):bool \nReturns true if the record has a field at position index and this field is to be generated (the default); otherwise returns false.
ScriptSqlRecord::isGenerated(String name):bool \nReturns true if the record has a field called name and this field is to be generated (the default); otherwise returns false.
ScriptSqlRecord::setGenerated(String name, bool generated):void \nSets the generated flag for the field called name to generated.\nIf the field does not exist, nothing happens. Only fields that have generated set to true\nare included in the SQL that is generated by QSqlQueryModel for example.
ScriptSqlRecord::setGenerated(Number i, bool generated):void \nSets the generated flag for the field index to generated.
ScriptSqlRecord::append(ScriptSqlField* field):void \nAppend a copy of field field to the end of the record.
ScriptSqlRecord::replace(Number pos, ScriptSqlField* field):void \nReplaces the field at position pos with the given field. If pos is out of range, nothing happens.
ScriptSqlRecord::insert(Number pos, ScriptSqlField* field):void \nInserts the field field at position pos in the record.
ScriptSqlRecord::remove(Number pos):void \nRemoves the field at position pos. If pos is out of range, nothing happens.
ScriptSqlRecord::isEmpty():bool \nReturns true if there are no fields in the record; otherwise returns false.
ScriptSqlRecord::contains(String name):bool \nReturns true if there is a field in the record called name; otherwise returns false.
ScriptSqlRecord::clear():void \nRemoves all the record's fields.
ScriptSqlRecord::clearValues():void \nClears the value of all fields in the record and sets each field to null.
ScriptSqlRecord::count():Number \nReturns the number of fields in the record.
ScriptSqlRecord::keyValues(ScriptSqlRecord keyFields):ScriptSqlRecord \nReturns a record containing the fields represented in keyFields set to values that match by field name.