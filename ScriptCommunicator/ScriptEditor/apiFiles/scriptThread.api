scriptThread::getAllObjectPropertiesAndFunctions(ScriptValue object):Array<String> \nReturns all functions and properties of an object.
scriptThread::appendTextToConsole(String string, bool newLine=true, bool bringToForeground=false):void \nAppends text to the script window console.
scriptThread::sleepFromScript(Number timeMs):void \nForces the script thread to sleep for ms milliseconds.
scriptThread::createUdpSocket(void):ScriptUdpSocket \nCreates an UDP socket.\nNote: This function is deprecated. Use the scriptInf.createUdpSocket instead.
scriptThread::createTcpServer(void):ScriptTcpServer \nCreates a TCP server.\nNote: This function is deprecated. Use the scriptInf.createTcpServer instead.
scriptThread::createTcpClient(void):ScriptTcpClient \nCreates a TCP socket.\nNote: This function is deprecated. Use the scriptInf.createTcpClient instead.
scriptThread::createTimer(void):ScriptTimer \nCreates a timer.
scriptThread::createSoundObject(QString wavFilename,bool isRelativePath=true):ScriptSound \nCreates a ScriptSound object (plays wav file).
scriptThread::createSerialPort(void):ScriptSerialPort \nCreates a serial port.\nNote: This function is deprecated. Use the scriptInf.createSerialPort instead.
scriptThread::createPlotWindow(void):ScriptPlotWindow \nCreates a plot window.
scriptThread::createXmlReader(void):ScriptXmlReader \nCreates a XML reader.
scriptThread::createXmlWriter(void):ScriptXmlWriter \nCreates a XML writer.
scriptThread::loadScript(String scriptPath, bool isRelativePath=true):bool \nLoads/includes one script (QtScript has no built in include mechanism).
scriptThread::loadLibrary(String path, bool isRelativePath=true):bool \nLoads a dynamic link library and calls the init function (void init(QScriptEngine* engine)). With this function a script can extend his functionality.
scriptThread::sendDataArray(Array<Number> data, Number repetitionCount=0, Number pause=0, bool addToMainWindowSendHistory=false):bool \nSends a data array (Array) with the main interface (in MainInterfaceThread).\nNote:\nIf ScriptCommunicator is connected to a I2C master interface use i2cMasterReadWrite to send data.\nIf ScriptCommunicator is connected to a CAN interface use scriptInf.sendCanMessage to send data.\nIf ScriptCommunicator is connected to a I2C slave or to a SPI slave interface then this function sets the slave response\n(the data is only sent if the master request it).\nIf more bytes are requested in a transaction (from the master), the response will be wrapped as many times as necessary to complete the transaction.\nThe device buffer space is 64 bytes.\nNote: This function is deprecated. Use the scriptInf.sendDataArray instead.
scriptThread::sendString(String string, Number repetitionCount=0, Number pause=0, bool addToMainWindowSendHistory=false):bool \nSends a string (String) with the main interface (in MainInterfaceThread).\nNote:\nIf ScriptCommunicator is connected to a I2C master interface use i2cMasterReadWrite to send data.\nIf ScriptCommunicator is connected to a CAN interface use scriptInf.sendCanMessage to send data.\nIf ScriptCommunicator is connected to a I2C slave or to a SPI slave interface then this function sets the slave response\n(the data is only sent if the master request it).\nIf more bytes are requested in a transaction (from the master), the response will be wrapped as many times as necessary to complete the transaction.\nThe device buffer space is 64 bytes.\nNote: This function is deprecated. Use the scriptInf.sendString instead.
scriptThread::isConnected(void):bool \nReturns true if the main interface is connected.\nNote: This function is deprecated. Use the scriptInf.isConnected instead.
scriptThread::disconnect(void):void \nDisconnects the main interface.\nNote: This function is deprecated. Use the scriptInf.disconnect instead.
scriptThread::setSerialPortPins(bool setRTS, bool setDTR):void \nSets the serial port (main interface) RTS and DTR pins.\nNote: This function is deprecated. Use the scriptInf.setSerialPortPins instead.
scriptThread::getSerialPortSignals(void):Number \nReturns the state of the serial port signals (pins).\nThe signals are bit coded:\nNoSignal = 0x00\nDataTerminalReadySignal = 0x04\nDataCarrierDetectSignal = 0x08\nDataSetReadySignal = 0x10\nRingIndicatorSignal = 0x20\nRequestToSendSignal = 0x40\nClearToSendSignal = 0x80.\nNote: This function is deprecated. Use the scriptInf.getSerialPortSignals instead.
scriptThread::connectSerialPort(String name, Number baudRate = 115200, Number connectTimeout= 1000, Number dataBits = 8, String parity = "None", String stopBits = "1", String flowControl = "None"):bool \nConnects the main interface (serial port).\nNote: A successful call will modify the corresponding settings in the settings dialog.\nNote: This function is deprecated. Use the scriptInf.connectSerialPort instead.
scriptThread::connectSocket(bool isTcp, bool isServer, String ip, Number destinationPort, Number ownPort, Number connectTimeout = 5000):bool \nConnects the main interface (UDP or TCP socket).\nNote: A successful call will modify the corresponding settings in the settings dialog.\nNote: This function is deprecated. Use the scriptInf.connectSocket instead.
scriptThread::stopScript(void):void \nThis function stops the current script thread.
scriptThread::createProcessDetached(String program, Array<String> arguments, String  workingDirectory):bool \nStarts the program program with the arguments arguments in a new process, and detaches from it. Returns true on success, otherwise returns false.\nIf the calling process exits, the detached process will continue to run unaffected.The process will be started in the directory workingDirectory.\nIf workingDirectory is empty, the working directory is inherited from the calling process.
scriptThread::createProcess(String program, Array<String> arguments):Number \nStarts the program program with the arguments arguments in a new process, waits for it to finish, and then returns the exit code of the process.\nThe environment and working directory are inherited from the calling process.
scriptThread::createProcessAsynchronous(String program, Array<String> arguments, Number startWaitTime=30000, String workingDirectory=""): ScriptProcess \nStarts the program program with the arguments arguments in a new process.\nAny data the new process writes to the console is forwarded to the return process object.\nThe environment and working directory are inherited from the calling process.\nNote: Blocks until the process has been created or until startWaitTime milliseconds have passed (-1=infinite).
scriptThread::waitForFinishedProcess(ScriptProcess process, Number waitTime=30000):bool \nBlocks until the process has finished or until msecs milliseconds have passed (-1=infinite).
scriptThread::getProcessExitCode(ScriptProcess process):Number \nReturns the exit code of process.
scriptThread::killProcess(ScriptProcess process):void \nKills the current process, causing it to exit immediately.
scriptThread::terminateProcess(ScriptProcess process):void \nAttempts to terminate the process.\nThe process may not exit as a result of calling this function (it is given the chance to prompt the user for any unsaved files, etc).
scriptThread::writeToProcessStdin(ScriptProcess process, Array<Number> data, Number waitTime=30000):bool \nWrite data to the standard input of process. Returns true on success.\nNote: Blocks until the writing is finished or until msecs milliseconds have passed (-1=infinite).
scriptThread::processIsRunning(ScriptProcess process):bool \nReturns true if the process is running.
scriptThread::readAllStandardOutputFromProcess(ScriptProcess process, bool isBlocking=false, Number blockByte='\n', Number blockTime=30000):Array<Number> \nThis function returns all data available from the standard output of process (can be called after the process is finished).\nNote: If isBlocking is true then this function blocks until the blockByte has been received,\nblockTime has elapsed (-1=infinite) or the process is finished.
scriptThread::readAllStandardErrorFromProcess(ScriptProcess process, bool isBlocking=false,Number blockByte='\n', Number blockTime=30000):Array<Number> \nThis function returns all data available from the standard error of process (can be called after the process is finished).\nNote: If isBlocking is true then this function blocks until the blockByte has been received,\nblockTime has elapsed (-1=infinite) or the process is finished.
scriptThread::loadUserInterfaceFile(String path, bool isRelativePath=true, bool showAfterLoading = true):bool \nLoads an user interface file.\nNote: If an user interface was already loaded then the old user interface will be unloaded.
scriptThread::scriptShallExit(void):bool \nReturns true if the script shall exit.
scriptThread::getLocalIpAdress(void):Array<String> \nReturns all IP addresses found on the host machine.\nNote: This function is deprecated. Use the scriptInf.getLocalIpAdress instead.
scriptThread::showFileDialog(bool isSaveDialog, String caption, String dir, String filter, QWidget* parent=0):String \nShows a file dialog for selecting one file (QFileDialog::getSaveFileName or QFileDialog::getOpenFileName).
scriptThread::showOpenFileNamesDialog(String caption, String dir, String filter, QWidget* parent=0):Array<String> \nShows a file dialog for selecting one or more existing files (QFileDialog::getOpenFileNames).
scriptThread::showDirectoryDialog(String caption, String dir, QWidget* parent=0):String \nWrapper for QFileDialog::getExistingDirectory.
scriptThread::messageBox(String icon, String title, String text, QWidget* parent=0):void \nShows a message box. Possible values for icon:\n- 'Information'\n- 'Warning'\n- 'Critical'\n- 'Question'
scriptThread::showYesNoDialog(String icon, String title, String text, QWidget* parent=0):bool \nShows a yes/no dialog.
scriptThread::showTextInputDialog(String title, String label, String displayedText="", QWidget* parent=0):String \nscriptThreadenience function to get a string from the user.\nShows a QInputDialog::getText dialog (line edit).
scriptThread::showMultiLineTextInputDialog(String title, String label, String displayedText="", QWidget* parent=0):String \nscriptThreadenience function to get a multiline string from the user.\nShows a QInputDialog::getMultiLineText dialog (plain text edit).
scriptThread::showGetItemDialog(String title, String label, Array<String> displayedItems, Number currentItemIndex=0, bool editable=false, QWidget* parent=0):String \nscriptThreadenience function to let the user select an item from a string list.\nShows a QInputDialog::getItem dialog (combobox).
scriptThread::showGetIntDialog(String title, String label, Number initialValue, Number min, Number max, Number step, QWidget* parent=0):Array<Number> \nscriptThreadenience function to get an integer input from the user.\nShows a QInputDialog::getInt dialog (spinbox).
scriptThread::showGetDoubleDialog(String title, String label, Number initialValue, Number min, Number max, Number decimals, QWidget* parent=0):Array<Number> \nscriptThreadenience function to get a floating point number from the user.\nShows a QInputDialog::getDouble dialog (spinbox).
scriptThread::showColorDialog(Number initInitalRed=255, Number initInitalGreen=255, Number initInitalBlue=255, Number initInitalAlpha=255, bool alphaIsEnabled=false, QWidget* parent=0):Array<Number> \nscriptThreadenience function to get color settings from the user.
scriptThread::calculateCrc8(Array<Number> data):Number \nCalculates a crc8.
scriptThread::calculateCrc8WithPolynomial(Array<Number> data, Number polynomial, Number startValue=0):Number \nCalculates a crc8 with a given polynomial.
scriptThread::calculateCrc16(Array<Number> data):Number \nCalculates a crc16.
scriptThread::calculateCrc32(Array<Number> data):Number \nCalculates a crc32.
scriptThread::calculateCrc64(Array<Number> data):quint64 \nCalculates a crc64.
scriptThread::showReceivedDataInConsoles(bool show):bool \nScripts can switch on/off the adding of received data in the consoles (for fast data transfers).
scriptThread::showTransmitDataInConsoles(bool show):bool \nScripts can switch on/off the adding of transmitted data in the consoles (for fast data transfers).
scriptThread::addMessageToLogAndConsoles(String text, bool forceTimeStamp=false):void \nAdds a message into the log and the consoles (if they are active).
scriptThread::setGlobalString(String name, String string):void \nSets a string in the global string map (Scripts can exchange data with this map).
scriptThread::getGlobalString(String name, bool removeValue=false):String \nReturns a string from the global string map (Scripts can exchange data with this map).\nNote: Returns an empty string if name is not in the map.
scriptThread::setGlobalDataArray(String name, Array<Number> data):void \nSets a data vector in the global data vector map (Scripts can exchange data with this map).
scriptThread::getGlobalDataArray(String name, bool removeValue=false):Array<Number> \nReturns a data vector from the global data vector map (Scripts can exchange data with this map).\nNote: Returns an empty data vector if name is not in the map.
scriptThread::setGlobalUnsignedNumber(String name, Number number):void \nSets a unsigned number in the global unsigned number map Scripts can exchange data with this map).
scriptThread::getGlobalUnsignedNumber(String name,bool removeValue=false):Array<Number> \nReturns a unsigned number from the global unsigned number map (Scripts can exchange data with this map).\nThe first element is the result status (1=name found, 0=name not found). The second element is the read value.
scriptThread::setGlobalSignedNumber(String name, Number number):void \nSets a signed number in the global signed number map (Scripts can exchange data with this map).
scriptThread::getGlobalSignedNumber(String name,bool removeValue=false):Array<Number> \nReturns a signed number from the global signed number map (Scripts can exchange data with this map).\nThe first element is the result status (1=name found, 0=name not found). The second element is the read value.
scriptThread::setGlobalRealNumber(String name, Number number):void \nSets a real number in the global real number map (Scripts can exchange data with this map).
scriptThread::getGlobalRealNumber(String name, bool removeValue=false):Array<Number> \nReturns a real number from the global real number map (Scripts can exchange data with this map). \nThe first element is the result status (1=name found, 0=name not found). The second element is the read value.
scriptThread::setScriptThreadPriority(String priority):bool \nSets the priority of the script thread (which executes the current script). Possible values are:\n- LowestPriority\n- LowPriority\n- NormalPriority\n- HighPriority\n- HighestPriority\nNote: Per default script threads have LowestPriority.
scriptThread::getCurrentVersion(void):String \nReturns the current version of ScriptCommunicator.
scriptThread::exitScriptCommunicator(Number exitCode):void \nThis function exits ScriptCommunicator.
scriptThread::setBlockTime(Number blockTime):void \nSets the script block time (ms).\nNote: If the user presses the stop button the script must be exited after this time. If not then the script is\nregarded as blocked and will be terminated.
scriptThread::setScriptState(Number state, String scriptTableEntryName):bool \nSets the state of a script (running, paused or stopped).\nNote: The script must be in the script table (script window) and a script can not set it's own state.
scriptThread::getScriptTableName(void):String \nReturns the script-table (script window) name of the calling script.
scriptThread::currentCpuArchitecture(void):String \nReturns the architecture of the CPU that the application is running on, in text format.
scriptThread::productType(void):String \nReturns the product name of the operating system this application is running in.
scriptThread::productVersion(void):String \nReturns the product version of the operating system in string form.
scriptThread::availableSerialPorts(void):Array<String> \nReturns a list with the name of all available serial ports.\nNote: This function is deprecated. Use the scriptInf.availableSerialPorts instead.
scriptThread::getScriptArguments(void):Array<String> \nReturns the script arguments (command-line argument -A).
scriptThread::getScriptCommunicatorFolder(void):String \nReturns the ScriptCommunicator program folder.
scriptThread::getUserDocumentsFolder(void):String \nReturns the directory containing user document files.
scriptThread::addTabsToMainWindow(ScriptTabWidget* tabWidget):bool \nAdds script tabs to the main window.\nNote: This function fails in command-line mode.
scriptThread::addToolBoxPagesToMainWindow(ScriptToolBox* scriptToolBox):bool \nAdds script toolbox pages to the main window (all pages are removed from toolBox).\nNote: This function fails in command-line mode.
scriptThread::sendReceivedDataToMainInterface(Array<Number> data):void \nSends received data (received with an script internal interface) to the main interface.\nThis data will be shown as received data in the consoles, the log and will be received by worker scripts via the dataReceivedSignal.
scriptThread::checkScriptCommunicatorVersion(String minVersion):bool \nChecks if the version of ScriptCommunicator is equal/greater then the version in minVersion.\nThe format of minVersion is: 'major'.'minor' (e.g. 04.11).
scriptThread::getMainInterfaceSerialPortSettings(void):SerialPortSettings \nReturns the serial port settings of the main interface.\nNote: This function is deprecated. Use the scriptInf.getMainInterfaceSerialPortSettings instead.
scriptThread::getMainInterfaceSocketSettings(void):SocketSettings \nReturns the socket (UDP, TCP client/server) settings of the main interface.\nNote: This function is deprecated. Use the scriptInf.getMainInterfaceSocketSettings instead.
scriptThread::getMainWindowTitle(void):String \nReturns the title of the main window.
scriptThread::setMainWindowTitle(String newTitle):void \nSets the title of the main window.
scriptThread::getTimestamp(void):String \nReturns the current time stamp in a specific format (see QDateTime.toString for more details).\nIf the format string is empty then the format from the settings dialog (console options tab) is used.
scriptThread::getConsoleSettings(void):ConsoleSettings \nReturns the console settings (settings dialog).
scriptThread::setMainWindowAndTaskBarIcon(String iconFile, bool isRelativePath):void \nSets the main window and the ScriptCommunicator task bar icon.\nSupported formats: .ico, .gif, .png, .jpeg, .tiff, .bmp, .icns.
scriptThread::byteArrayToString(Array<Number> data):String \nscriptThreaderts a byte array which contains ascii characters into an ascii string (String).\nNote: This function is deprecated. Use the conv.byteArrayToString instead.
scriptThread::byteArrayToHexString(Array<Number> data):String \nscriptThreaderts a byte array into a hex string.\nNote: This function is deprecated. Use the conv.byteArrayToHexString instead.
scriptThread::stringToArray(String str):Array<Number> \nscriptThreaderts an ascii string into a byte array.\nNote: This function is deprecated. Use the conv.stringToArray instead.
scriptThread::addStringToArray(Array<Number> array , String str):Array<Number> \nAdds an ascii string to a byte array.\nNote: This function is deprecated. Use the conv.addStringToArray instead.
scriptThread::readFile(String path, bool isRelativePath=true, quint64 startPosition=0, qint64 numberOfBytes=-1):String \nReads a text file and returns the content.\nNote: This function is deprecated. Use the scriptFile.readFile instead.
scriptThread::readBinaryFile(String path, bool isRelativePath=true, quint64 startPosition=0, qint64 numberOfBytes=-1):Array<Number> \nReads a binary file and returns the content.\nNote: This function is deprecated. Use the scriptFile.readBinaryFile instead.
scriptThread::getFileSize(String path, bool isRelativePath=true):qint64 \nReturns the size of a file.\nNote: This function is deprecated. Use the scriptFile.getFileSize instead.
scriptThread::checkFileExists(String path, bool isRelativePath=true):bool \nChecks if a file exists.\nNote: This function is deprecated. Use the scriptFile.checkFileExists instead.
scriptThread::checkDirectoryExists(String directory, bool isRelativePath=true):bool \nChecks if a directory exists.\nNote: This function is deprecated. Use the scriptFile.checkDirectoryExists instead.
scriptThread::createDirectory(String directory, bool isRelativePath=true):bool \nCreates a directory.\nNote: This function is deprecated. Use the scriptFile.createDirectory instead.
scriptThread::renameDirectory(String directory, String newName):bool \nRenames a directory.\nNote: This function is deprecated. Use the scriptFile.renameDirectory instead.
scriptThread::renameFile(String path, String newName):bool \nRenames a file.\nNote: This function is deprecated. Use the scriptFile.renameFile instead.
scriptThread::deleteFile(String path, bool isRelativePath=true):bool \nDeletes a file.\nNote: This function is deprecated. Use the scriptFile.deleteFile instead.
scriptThread::deleteDirectory(String directory, bool isRelativePath=true):bool \nDeletes a directory (must be empty).\nNote: This function is deprecated. Use the scriptFile.deleteDirectory instead.
scriptThread::deleteDirectoryRecursively(String directory, bool isRelativePath=true):bool \nIf a file or directory cannot be removed, deleteDirectoryRecursively() keeps going and attempts to delete as many files and sub-directories as possible, then returns false. If the directory was already removed, the method returns true (expected result already reached).\nNote: This function is deprecated. Use the scriptFile.deleteDirectoryRecursively instead.
scriptThread::readDirectory(String directory, bool isRelativePath=true, bool recursive=true, bool returnFiles=true, bool returnDirectories=true):Array<String> \nReads the content of a directory and his sub directories.\nNote: This function is deprecated. Use the scriptFile.readDirectory instead.
scriptThread::writeFile(String path, bool isRelativePath, String content, bool replaceFile, qint64 startPosition=-1):bool \nWrites a text file (if replaceFile is true, the existing file is overwritten, else the content is appended).\nNote: This function is deprecated. Use the scriptFile.writeFile instead.
scriptThread::writeBinaryFile(String path, bool isRelativePath, Array<Number> content, bool replaceFile, qint64 startPosition=-1):bool \nWrites a binary file (if replaceFile is true, the existing file is overwritten, else the content is appended).\nNote: This function is deprecated. Use the scriptFile.writeBinaryFile instead.
scriptThread::createAbsolutePath(String fileName):String \nscriptThreaderts a relative path into an absolute path.\nNote: This function is deprecated. Use the scriptFile.createAbsolutePath instead.
scriptThread::getScriptFolder(void):String \nReturns the folder in which the script resides.\nNote: This function is deprecated. Use the scriptFile.getScriptFolder instead.
scriptThread::zipDirectory(String fileName, String sourceDirName, String comment=""):bool \nZips a directory.\nNote: This function is deprecated. Use the scriptFile.zipDirectory instead.
scriptThread::zipFiles(String fileName, VariantList fileList, String comment=""):bool \nAdds files to a zip file.\nNote: This function is deprecated. Use the scriptFile.zipFiles instead.
scriptThread::extractZipFile(String fileName, String destinationDirectory):bool \nExtracts a zip file.\nNote: This function is deprecated. Use the scriptFile.extractZipFile instead.
scriptThread::globalStringChangedSignal.connect(String name, String string)\nIs emitted if a string in the global string map has been changed.
scriptThread::globalDataArrayChangedSignal.connect(String name, Array<Number> data)\nIs emitted if a data vector in the global string data vector has been changed.
scriptThread::globalUnsignedChangedSignal.connect(String name, Number number)\nIs emitted if an unsigned number in the global unsigned number map has been changed
scriptThread::globalSignedChangedSignal.connect(String name, Number number)\nIs emitted if a signed number in the global signed number map has been changed
scriptThread::globalRealChangedSignal.connect(String name, Number number)\nIs emitted if a real number in the global real number map has been changed
scriptThread::dataReceivedSignal.connect(Array<Number> data)\nThis signal is emitted if data has been received with the main interface\n(only if the main interface is not a CAN or I2C master interface, use scriptInf.canMessagesReceivedSignal if the main interface is a CAN interface and\nscriptInf.i2cMasterDataReceivedSignal if the main interface is an I2C master interface).\nNote: This function is deprecated. Use the scriptInf.dataReceivedSignal instead.
scriptThread::mainWindowClearConsoleClickedSignal.connect(void)\nIs emitted if the clear console button in the main window is pressed.
scriptThread::mainWindowLockScrollingClickedSignal.connect(bool isChecked)\nIs emitted if the lock scrolling button in the main window is pressed.