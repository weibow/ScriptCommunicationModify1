ScriptXmlWriter::writeBufferToFile(String fileName, bool isRelativePath=true):bool \nWrites the internal XML Buffer to a file.
ScriptXmlWriter::getInternalBuffer(void):String \nReturns the content of the internal buffer.
ScriptXmlWriter::clearInternalBuffer(void):void \nClears the internal buffer.
ScriptXmlWriter::setCodec(String codecName):void \nSets the codec for this object to codec. The codec is used for encoding any data that is written.\nBy default, ScriptXmlWriter uses UTF-8.\nThe encoding information is stored in the initial xml tag which gets written when you call writeStartDocument().\nCall this function before calling writeStartDocument().
ScriptXmlWriter::setAutoFormatting(bool autoFormatting):void \nSets the autoFormatting property. This property controls whether or not the stream writer automatically formats\nthe generated XML data. If enabled, the writer automatically adds line-breaks and indentation to empty sections between elements\n(ignorable whitespace). The main purpose of auto-formatting is to split the data into several lines, and to\nincrease readability for a human reader. The indentation depth can be controlled through the autoFormattingIndent property.
ScriptXmlWriter::autoFormatting(void):bool \nReturns the value of the autoFormating property.
ScriptXmlWriter::setAutoFormattingIndent(Number spacesOrTabs):void \nSet the autoFormatingIndent property. This property holds the number of spaces or tabs used for indentation\nwhen auto-formatting is enabled. Positive numbers indicate spaces, negative numbers tabs.
ScriptXmlWriter::autoFormattingIndent(void):Number \nReturns the autoFormatingIndent property.
ScriptXmlWriter::writeStartDocument(String version="1.0"):void \nWrites a document start with the attribute version.
ScriptXmlWriter::writeStartDocument(bool standalone, String version="1.0"):void \nWrites a document start with the attributes version and standalone.
ScriptXmlWriter::writeEndDocument(void):void \nCloses all remaining open start elements and writes a newline.
ScriptXmlWriter::writeNamespace(String namespaceUri, String prefix = ""):void \nWrites a namespace declaration for namespaceUri with prefix. If prefix is empty, ScriptXmlWriter assigns a\nunique prefix consisting of the letter 'n' followed by a number.\nIf writeStartElement() or writeEmptyElement() was called, the declaration applies to the current element;\notherwise it applies to the next child element.\nNote that the prefix xml is both predefined and reserved for http://www.w3.org/XML/1998/namespace, which in turn\ncannot be bound to any other prefix. The prefix xmlns and its URI http://www.w3.org/2000/xmlns/ are used for the\nnamespace mechanism itself and thus completely forbidden in declarations.
ScriptXmlWriter::writeDefaultNamespace(String namespaceUri):void \nWrites a default namespace declaration for namespaceUri.\nIf writeStartElement() or writeEmptyElement() was called, the declaration applies to the current element;\notherwise it applies to the next child element.\nNote that the namespaces http://www.w3.org/XML/1998/namespace (bound to xmlns) and\nhttp://www.w3.org/2000/xmlns/ (bound to xml) by definition cannot be declared as default.
ScriptXmlWriter::writeStartElement(String name, String namespaceUri=""):void \nWrites a start element with name, prefixed for the specified namespaceUri. If the namespace has not been declared yet,\nScriptXmlWriter will generate a namespace declaration for it. Subsequent calls to writeAttribute() will add attributes to this element.
ScriptXmlWriter::writeEmptyElement(String name, String namespaceUri=""):void \nWrites an empty element with name, prefixed for the specified namespaceUri. If the namespace has not been declared,\nScriptXmlWriter will generate a namespace declaration for it. Subsequent calls to writeAttribute() will add attributes to this element.
ScriptXmlWriter::writeTextElement(String name, String text, String namespaceUri=""):void \nWrites a text element with name, prefixed for the specified namespaceUri, and text.\nIf the namespace has not been declared, ScriptXmlWriter will generate a namespace declaration for it.\nThis is a convenience function equivalent to:\nwriteStartElement(name, namespaceUri);\nwriteCharacters(text);\nwriteEndElement();
ScriptXmlWriter::writeEndElement(void):void \nCloses the previous start element.
ScriptXmlWriter::writeAttribute(String name, String value, String namespaceUri=""):void \nWrites an attribute with name and value, prefixed for the specified namespaceUri. If the namespace has not been declared yet, ScriptXmlWriter will\ngenerate a namespace declaration for it. This function can only be called after writeStartElement() or writeEmptyElement() have been called.
ScriptXmlWriter::writeCDATA(String text):void \nWrites text as CDATA section. If text contains the forbidden character sequence "]]>", it is split into different\nCDATA sections.This function mainly exists for completeness. Normally you should not need use it, because\nwriteCharacters() automatically escapes all non-content characters.
ScriptXmlWriter::writeCharacters(String text):void \nWrites text. The characters "<", "&", and """ are escaped as entity references "&lt;", "&amp;, and "&quot;".\nTo avoid the forbidden sequence "]]>", ">" is also escaped as "&gt;".
ScriptXmlWriter::writeComment(String text):void \nWrites text as XML comment, where text must not contain the forbidden sequence "--" or end with "-".\nNote that XML does not provide any way to escape "-" in a comment.
ScriptXmlWriter::writeDTD(String dtd):void \nWrites a DTD section. The dtd represents the entire doctypedecl production from the XML 1.0 specification.
ScriptXmlWriter::writeEntityReference(String name):void \nWrites the entity reference name to the internal buffer, as "name".
ScriptXmlWriter::writeProcessingInstruction(String target, String data = ""):void \nWrites an XML processing instruction with target and data, where data must not contain the sequence "?>".