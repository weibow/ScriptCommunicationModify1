scriptInf::createUdpSocket(void):ScriptUdpSocket \nCreates an UDP socket.
scriptInf::createTcpServer(void):ScriptTcpServer \nCreates a TCP server.
scriptInf::createTcpClient(void):ScriptTcpClient \nCreates a TCP socket.
scriptInf::createSerialPort(void):ScriptSerialPort \nCreates a serial port.
scriptInf::createPcanInterface(void):ScriptPcanInterface \nCreates a pcan interface.
scriptInf::aardvarkI2cSpiCreateInterface(void):ScriptAardvarkI2cSpi \nCreates an Aardvark I2c/SPI interface.
scriptInf::sendDataArray(Array<Number> data, Number repetitionCount=0, Number pause=0, bool addToMainWindowSendHistory=false):bool \nSends a data array (Array) with the main interface (in MainInterfaceThread).\nNote:\nIf ScriptCommunicator is connected to a I2C master interface use i2cMasterReadWrite to send data.\nIf ScriptCommunicator is connected to a CAN interface use sendCanMessage to send data.\nIf ScriptCommunicator is connected to a I2C slave or to a SPI slave interface then this function sets the slave response\n(the data is only sent if the master request it).\nIf more bytes are requested in a transaction (from the master), the response will be wrapped as many times as necessary to complete the transaction.\nThe device buffer space is 64 bytes.
scriptInf::sendCanMessage(Number type, Number canId, Array<Number> data, Number repetitionCount=0, Number pause=0, bool addToMainWindowSendHistory=false):bool \nSends a can message with the main interface (in MainInterfaceThread).\nIf more then 8 data bytes are given several can messages with the same can id will be sent.
scriptInf::i2cMasterReadWrite(Number flags, Number slaveAddress, Number numberOfBytesToRead, Array<Number> dataToSend = Array<Number>(), Number repetitionCount=0, Number pause=0, bool addToMainWindowSendHistory=false):bool \nAccesses the I2C bus (write/read).\nNote: This functions works only if the main interface is an I2C master.\nTo receive data in master mode the signal i2cMasterDataReceivedSignal must be used.\nPossible flags: 0x00= no flags, 0x01= 10bit address, 0x02=combined FMT,0x04= no stop condition (use i2cMasterFreeBus to generate the stop condition later)
scriptInf::i2cMasterFreeBus(void):void \nFrees the main interface I2C bus (this function can be used if the no stop condition was created during the last i2cMasterReadWrite call).
scriptInf::aardvarkI2cSpiDetectDevices(void):String \nReturns a string which contains informations about all detected Aardvark I2C/SPI devices.
scriptInf::sendString(String string, Number repetitionCount=0, Number pause=0, bool addToMainWindowSendHistory=false):bool \nSends a string (String) with the main interface (in MainInterfaceThread).\nNote:\nIf ScriptCommunicator is connected to a I2C master interface use i2cMasterReadWrite to send data.\nIf ScriptCommunicator is connected to a CAN interface use sendCanMessage to send data.\nIf ScriptCommunicator is connected to a I2C slave or to a SPI slave interface then this function sets the slave response\n(the data is only sent if the master request it).\nIf more bytes are requested in a transaction (from the master), the response will be wrapped as many times as necessary to complete the transaction.\nThe device buffer space is 64 bytes.
scriptInf::isConnected(void):bool \nReturns true if the main interface is connected.
scriptInf::isConnectedWithCan(void):bool \nReturns true if the main interface is a CAN interface (and is connected).
scriptInf::isConnectedWithI2c(void):bool \nReturns true if the main interface is a I2C interface (and is connected).
scriptInf::disconnect(void):void \nDisconnects the main interface.
scriptInf::connectPcan(Number channel, Number baudrate, Number connectTimeout = 2000, bool busOffAutoReset = true, bool powerSupply = false, bool filterExtended = true, Number filterFrom = 0, Number filterTo = 0x1fffffff):bool \nConnects the main interface (PCAN).Note: A successful call will modify the corresponding settings in the settings dialog.
scriptInf::setSerialPortPins(bool setRTS, bool setDTR):void \nSets the serial port (main interface) RTS and DTR pins.
scriptInf::getSerialPortSignals(void):Number \nReturns the state of the serial port signals (pins).\nThe signals are bit coded:\nNoSignal = 0x00\nDataTerminalReadySignal = 0x04\nDataCarrierDetectSignal = 0x08\nDataSetReadySignal = 0x10\nRingIndicatorSignal = 0x20\nRequestToSendSignal = 0x40\nClearToSendSignal = 0x80
scriptInf::aardvarkI2cSpiConnect(AardvarkI2cSpiSettings aardvarkI2cSpiSettings, Number connectTimeout = 5000):bool \nConnects the main interface (Aardvark I2C/SPI).\nNote: A successful call will modify the corresponding settings in the settings dialog.
scriptInf::connectSerialPort(String name, Number baudRate = 115200, Number connectTimeout= 1000, Number dataBits = 8, String parity = "None", String stopBits = "1", String flowControl = "None"):bool \nConnects the main interface (serial port).\nNote: A successful call will modify the corresponding settings in the settings dialog.
scriptInf::connectSocket(bool isTcp, bool isServer, String ip, Number destinationPort, Number ownPort, Number connectTimeout = 5000):bool \nConnects the main interface (UDP or TCP socket).\nNote: A successful call will modify the corresponding settings in the settings dialog.
scriptInf::aardvarkI2cSpiSetOutput(Number pinIndex, bool high, bool updateSettingsDialog=false):bool \nSets the value of an output pin (Aardvark I2C/SPI device).\nPossible pin indexes:0=Pin1/SCL, 1=Pin3/SDA, 2=Pin5/MISO, 3=Pin7/SCK, 4=Pin8/MOSI, 5=Pin9/SS0.
scriptInf::aardvarkI2cSpiChangePinConfiguration(Number pinIndex, bool isInput, bool withPullups=false):bool \nChanges the configuration of a pin (Aardvark I2C/SPI device).\nPossible pin indexes:0=Pin1/SCL, 1=Pin3/SDA, 2=Pin5/MISO, 3=Pin7/SCK, 4=Pin8/MOSI, 5=Pin9/SS0
scriptInf::aardvarkI2cSpiGetMainInterfaceSettings(void):AardvarkI2cSpiSettings \nReturns the Aardvark I2C/SPI settings of the main interface.\nPossible pin indexes:0=Pin1/SCL, 1=Pin3/SDA, 2=Pin5/MISO, 3=Pin7/SCK, 4=Pin8/MOSI, 5=Pin9/SS0.
scriptInf::aardvarkI2cSpiReadAllInputs(void):Array<bool> \nReads all inputs of the Aardvark I2C/SPI device.\nThe indexes of the result array are:0=Pin1/SCL, 1=Pin3/SDA, 2=Pin5/MISO, 3=Pin7/SCK, 4=Pin8/MOSI, 5=Pin9/SS0.
scriptInf::getMainInterfaceSerialPortSettings(void):SerialPortSettings \nReturns the serial port settings of the main interface.
scriptInf::getMainInterfaceSocketSettings(void):SocketSettings \nReturns the socket (UDP, TCP client/server) settings of the main interface.
scriptInf::getLocalIpAdress(void):Array<String> \nReturns all IP addresses found on the host machine.
scriptInf::availableSerialPorts(void):Array<String> \nReturns a list with the name of all available serial ports.
scriptInf::dataReceivedSignal.connect(Array<Number> data)\nThis signal is emitted if data has been received with the main interface\n(only if the main interface is not a CAN or I2C master interface, use canMessagesReceivedSignal if the main interface is a CAN interface and\ni2cMasterDataReceivedSignal if the main interface is an I2C master interface).
scriptInf::i2cMasterDataReceivedSignal.connect(Number flags, Number address, Array<Number> data):void \nThis signal is emitted if data has been received with the main interface and the main interface is an I2C master.
scriptInf::canMessagesReceivedSignal.connect(Array<Number> types, Array<Number> messageIds, Array<Number> timestamps, Array<Array<Number>>  data)\nThis signal is emitted if a can message (or several) has been received with the main interface.	
scriptInf::sendDataFromMainInterfaceSignal.connect(Array<Number> data)\nIs emitted if the main interface shall send data.\nScripts can use this signal to send the main interface data with an additional interface.		
scriptInf::aardvarkI2cSpiInputStatesChangedSignal.connect(Array<bool> states):void \nIs emitted if the input states (true=1. false=0) of the Ardvard I2C/SPI device (main interface) have been changed.\nElements of state::0=Pin1/SCL, 1=Pin3/SDA, 2=Pin5/MISO, 3=Pin7/SCK, 4=Pin8/MOSI, 5=Pin9/SS0.
scriptInf::slaveDataSentSignal.connect(Array<Number> data):void \nIs emitted if the main interface is a I2C or SPI slave and has sent data.