ScriptSqlField::setValue(QVariant value):void \nSets the value of the field to value. If the field is read-only (isReadOnly() returns true), nothing happens.
ScriptSqlField::value(void):QVariant \nReturns the value of the field as a QVariant.
ScriptSqlField::setName(String name):void \nSets the name of the field to name.
ScriptSqlField::name(void):String \nReturns the name of the field.
ScriptSqlField::isNull(void):bool \nReturns true if the field's value is NULL; otherwise returns false.
ScriptSqlField::setReadOnly(bool readOnly):void \nSets the read only flag of the field's value to readOnly.\nA read-only field cannot have its value set with setValue() and cannot be cleared to NULL with clear().
ScriptSqlField::isReadOnly(void):bool \nReturns true if the field's value is read-only; otherwise returns false.
ScriptSqlField::clear(void):void \nClears the value of the field and sets it to NULL. If the field is read-only, nothing happens.
ScriptSqlField::type(void):Number \nReturns the field's type as stored in the database.\nNote that the actual value might have a different type,\nNumerical values that are too large to store in a long Number\nor Number are usually stored as strings to prevent precision loss.
ScriptSqlField::isAutoValue(void):bool \nReturns true if the value is auto-generated by the database,\nfor example auto-increment primary key values.
ScriptSqlField::setType(QVariant::Type type):void \nSet's the field's variant type to type.
ScriptSqlField::setRequiredStatus(Number status):void \nSets the required status of this field to required.
ScriptSqlField::setRequired(bool required):void \nSets the required status of this field to Required if required is true; otherwise sets it to Optional.
ScriptSqlField::setLength(Number fieldLength):void \nSets the field's length to fieldLength.\nFor strings this is the maximum number of characters the string can hold;\nthe meaning varies for other types.
ScriptSqlField::setPrecision(Number precision):void \nSets the field's precision. This only affects numeric fields.
ScriptSqlField::setDefaultValue(QVariant value):void \nSets the default value used for this field to value.
ScriptSqlField::setSqlType(Number type):void \nSetsthe SQL type.
ScriptSqlField::setGenerated(bool gen):void \nSets the generated state. If gen is false, no SQL will be generated for this field;\notherwise, Qt classes such as QSqlQueryModel and QSqlTableModel will generate SQL for this field.
ScriptSqlField::setAutoValue(bool autoVal):void \nMarks the field as an auto-generated value if autoVal is true.
ScriptSqlField::requiredStatus(void):Number \nReturns true if this is a required field; otherwise returns false.\nAn INSERT will fail if a required field does not have a value.
ScriptSqlField::length(void):Number \nReturns the field's length.
ScriptSqlField::precision(void):Number \nReturns the field's precision; this is only meaningful for numeric types.
ScriptSqlField::defaultValue(void):QVariant \nReturns the field's default value (which may be NULL).
ScriptSqlField::typeID(void):Number \nReturns the field's variant type.
ScriptSqlField::isGenerated(void):bool \nReturns true if the field is generated; otherwise returns false.
ScriptSqlField::isValid(void):bool \nReturns true if the field's variant type is valid; otherwise returns false.