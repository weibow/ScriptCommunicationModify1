ScriptSqlQuery::isValid(void):bool \nReturns true if the query is currently positioned on a valid record; otherwise returns false.
ScriptSqlQuery::isActive(void):bool \nReturns true if the query is active.\nAn active QSqlQuery is one that has been exec()'d successfully but not yet finished with.\nWhen you are finished with an active query,\nyou can make make the query inactive by calling finish() or clear(),\nor you can delete the QSqlQuery instance.
ScriptSqlQuery::isNull(Number field):bool \nReturns true if the query is active and positioned on a valid record and the field is NULL; otherwise returns false. 
ScriptSqlQuery::isNull(String name):bool \nReturns true if the query is active and positioned on a valid record and the field is NULL; otherwise returns false. 
ScriptSqlQuery::at(void):Number \nReturns the current internal position of the query.\nThe first record is at position zero. If the position is invalid,\nthe function returns QSql::BeforeFirstRow or QSql::AfterLastRow, which are special negative values.
ScriptSqlQuery::lastQuery(void):String \nReturns the text of the current query being used, or an empty string if there is no current query text.
ScriptSqlQuery::numRowsAffected(void):Number \nReturns the number of rows affected by the result's SQL statement, or -1 if it cannot be determined.\nNote that for SELECT statements, the value is undefined; use size() instead.\nIf the query is not active, -1 is returned.
ScriptSqlQuery::lastError(void):ScriptSqlError \nReturns error information about the last error (if any) that occurred with this query.
ScriptSqlQuery::isSelect(void):bool \nReturns true if the current query is a SELECT statement; otherwise returns false.
ScriptSqlQuery::size(void):Number \nReturns the size of the result (number of rows returned),\nor -1 if the size cannot be determined or if the database does not support reporting information about query sizes.\nNote that for non-SELECT statements (isSelect() returns false),\nsize() will return -1. If the query is not active (isActive() returns false), -1 is returned.
ScriptSqlQuery::isForwardOnly(void):bool \nReturns true if you can only scroll forward through a result set; otherwise returns false.
ScriptSqlQuery::record(void):ScriptSqlRecord \nReturns a ScriptSqlRecord containing the field information for the current query.\nIf the query points to a valid row (isValid() returns true),\nthe record is populated with the row's values.\nAn empty record is returned when there is no active query (isActive() returns false).
ScriptSqlQuery::setForwardOnly(bool forward):void \nSets forward only mode to forward.\nIf forward is true, only next() and seek() with positive values,\nare allowed for navigating the results.
ScriptSqlQuery::exec(String query):bool \nExecutes a previously prepared SQL query.\nReturns true if the query executed successfully; otherwise returns false.
ScriptSqlQuery::value(Number i):QVariant \nReturns the value of field index in the current record.
ScriptSqlQuery::value(String name):QVariant \nReturns the value of field name in the current record.
ScriptSqlQuery::setNumericalPrecisionPolicy(Number precisionPolicy):void \nInstruct the database driver to return numerical values with a precision specified by precisionPolicy.
ScriptSqlQuery::numericalPrecisionPolicy(void):Number \nReturns the current precision policy (QSql::NumericalPrecisionPolicy).
ScriptSqlQuery::seek(Number i, bool relative = false):bool \nRetrieves the record at position index, if available, and positions the query on the retrieved record.\nThe first record is at position 0.\nNote that the query must be in an active state and isSelect() must return true before calling this function.
ScriptSqlQuery::next(void):bool \nRetrieves the next record in the result, if available, and positions the query on the retrieved record.\nNote that the result must be in the active state and isSelect()\nmust return true before calling this function or it will do nothing and return false.
ScriptSqlQuery::previous(void):bool \nRetrieves the previous record in the result, if available, and positions the query on the retrieved record.\nNote that the result must be in the active state and isSelect()\nmust return true before calling this function or it will do nothing and return false.
ScriptSqlQuery::first(void):bool \nRetrieves the first record in the result, if available, and positions the query on the retrieved record.\nNote that the result must be in the active state and isSelect()\nmust return true before calling this function or it will do nothing and return false. Returns true if successful. If unsuccessful the query position is set to an invalid position and false is returned.
ScriptSqlQuery::last(void):bool \nRetrieves the last record in the result, if available, and positions the query on the retrieved record.\nNote that the result must be in the active state and isSelect()\nmust return true before calling this function or it will do nothing and return false. Returns true if successful. If unsuccessful the query position is set to an invalid position and false is returned.
ScriptSqlQuery::clear()void \nClears the result set and releases any resources held by the query. Sets the query state to inactive.\nYou should rarely if ever need to call this function.
ScriptSqlQuery::exec(void):bool \nExecutes a previously prepared SQL query. Returns true if the query executed successfully; otherwise returns false.
ScriptSqlQuery::execBatch(Number mode = (Number)QSqlQuery::ValuesAsRows):bool \nExecutes a previously prepared SQL query in a batch.\nAll the bound parameters have to be lists of variants. If the database doesn't support batch executions,\nthe driver will simulate it using conventional exec() calls.\nReturns true if the query is executed successfully; otherwise returns false.
ScriptSqlQuery::prepare(String query):bool \nPrepares the SQL query query for execution. Returns true if the query is prepared successfully; otherwise returns false.
ScriptSqlQuery::bindValue(String placeholder, QVariant val, Number type = (Number)QSql::In):void \nSet the placeholder placeholder to be bound to value val in the prepared statement.\nNote that the placeholder mark (e.g :) must be included when specifying the placeholder name.\nIf paramType is QSql::Out or QSql::InOut, the placeholder will be overwritten with data from the database after the exec() call.\nIn this case, sufficient space must be pre-allocated to store the result into.
ScriptSqlQuery::bindValue(Number pos, QVariant val, Number type = (Number)QSql::In):void \nSet the placeholder in position pos to be bound to value val in the prepared statement.\nField numbering starts at 0. If paramType is QSql::Out or QSql::InOut,\nthe placeholder will be overwritten with data from the database after the exec() call.
ScriptSqlQuery::addBindValue(QVariant val, Number type = (Number)QSql::In):void \nAdds the value val to the list of values when using positional value binding.\nThe order of the addBindValue() calls determines which placeholder a value will be bound to in the prepared query.\nIf paramType is QSql::Out or QSql::InOut, the placeholder will be overwritten with data from the database after the exec() call.
ScriptSqlQuery::boundValue(String placeholder):QVariant \nReturns the value for the placeholder.
ScriptSqlQuery::boundValue(Number pos):QVariant \nReturns the value for the placeholder at position pos.
ScriptSqlQuery::boundValues(void):ScriptMap \nReturns a map of the bound values.
ScriptSqlQuery::executedQuery(void):String \nReturns the last query that was successfully executed.
ScriptSqlQuery::lastInsertId(void):QVariant \nReturns the object ID of the most recent inserted row if the database supports it.\nAn invalid QVariant will be returned if the query did not insert any value or if the database does not report the id back.\nIf more than one row was touched by the insert, the behavior is undefined.
ScriptSqlQuery::finish(void):void \nInstruct the database driver that no more data will be fetched from this query until it is re-executed.\nThere is normally no need to call this function, but it may be helpful in order to free resources\nsuch as locks or cursors if you intend to re-use the query at a later time.
ScriptSqlQuery::nextResult(void):bool \nDiscards the current result set and navigates to the next if available.